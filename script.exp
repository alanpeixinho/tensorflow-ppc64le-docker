#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sun Jun  2 04:02:20 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./configure
match_max 100000
expect -exact "WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the command \"bazel shutdown\".\r\r
You have bazel 0.15.0- (@non-git) installed.\r
Please specify the location of python. \[Default is /usr/bin/python\]: "
send -- "\r"
expect -exact "\r
\r
\r
Found possible Python library paths:\r
  /usr/local/lib/python2.7/dist-packages\r
  /usr/lib/python2.7/dist-packages\r
Please input the desired Python library path to use.  Default is \[/usr/local/lib/python2.7/dist-packages\]\r
"
send -- "/usr/local/lib/python2.7\[D"
expect -exact "^\[\[D"
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact "  "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- "lib/pe"
expect -exact " "
send -- "ython271"
expect -exact " "
send -- ""
expect -exact " "
send -- ".7/dist-packages\r"
expect -exact ".7/dist-packages\r
Do you wish to build TensorFlow with Apache Ignite support? \[Y/n\]: "
send -- "n\r"
expect -exact "n\r
No Apache Ignite support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with XLA JIT support? \[Y/n\]: "
send -- "n\r"
expect -exact "n\r
No XLA JIT support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with OpenCL SYCL support? \[y/N\]: "
send -- "n\r"
expect -exact "n\r
No OpenCL SYCL support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with ROCm support? \[y/N\]: "
send -- "n\r"
expect -exact "n\r
No ROCm support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with CUDA support? \[y/N\]: "
send -- "y\r"
expect -exact "y\r
CUDA support will be enabled for TensorFlow.\r
\r
Please specify the CUDA SDK version you want to use. \[Leave empty to default to CUDA 9.0\]: "
send -- "10.0\r"
expect -exact "10.0\r
\r
\r
Please specify the location where CUDA 10.0 toolkit is installed. Refer to README.md for more details. \[Default is /usr/local/cuda\]: "
send -- "\r"
expect -exact "\r
\r
\r
Please specify the cuDNN version you want to use. \[Leave empty to default to cuDNN 7\]: "
send -- "7\r"
expect -exact "7\r
\r
\r
Please specify the location where cuDNN 7 library is installed. Refer to README.md for more details. \[Default is /usr/local/cuda\]: "
send -- "\r"
expect -exact "\r
\r
\r
Do you wish to build TensorFlow with TensorRT support? \[y/N\]: "
send -- "n\r"
expect -exact "n\r
No TensorRT support will be enabled for TensorFlow.\r
\r
Please specify the NCCL version you want to use. If NCCL 2.2 is not installed, then you can use version 1.3 that can be fetched automatically but it may have worse performance with multiple GPUs. \[Default is 2.2\]: "
send -- "2.2\r"
expect -exact "2.2\r
\r
\r
NCCL libraries found in /usr/lib/powerpc64le-linux-gnu/libnccl.so\r
This looks like a system path.\r
Assuming NCCL header path is /usr/include\r
Please specify a list of comma-separated Cuda compute capabilities you want to build with.\r
You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.\r
Please note that each additional compute capability significantly increases your build time and binary size. \[Default is: 3.5,7.0\]: "
send -- "3.5,7.0,7.5\r"
expect -exact "3.5,7.0,7.5\r
\r
\r
Do you want to use clang as CUDA compiler? \[y/N\]: "
send -- "n\r"
expect -exact "n\r
nvcc will be used as CUDA compiler.\r
\r
Please specify which gcc should be used by nvcc as the host compiler. \[Default is /usr/bin/gcc\]: "
send -- "\r"
expect -exact "\r
\r
\r
Do you wish to build TensorFlow with MPI support? \[y/N\]: "
send -- "n\r"
expect -exact "n\r
No MPI support will be enabled for TensorFlow.\r
\r
Please specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified \[Default is -mcpu=native\]: "
send -- "\r"
expect -exact "\r
\r
\r
Would you like to interactively configure ./WORKSPACE for Android builds? \[y/N\]: "
send -- "n\r"
expect eof
